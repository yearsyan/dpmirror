apply plugin: 'com.android.application'

def moduleVersion = "0.1.6"
def moduleVersionCode = 160
def author = "yearsyan"

android {
    namespace 'io.github.tsioam.mirror'
    compileSdk 35
    defaultConfig {
        applicationId "io.github.tsioam.mirror.server"
        minSdkVersion 21
        targetSdkVersion 35
        versionCode moduleVersionCode
        versionName moduleVersion
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    buildFeatures {
        buildConfig true
    }
}

dependencies {
    testImplementation libs.junit
    testImplementation project(':shared')
    implementation libs.nanohttpd
    implementation project(':shared')
    implementation project(':core')
}

android.applicationVariants.configureEach { variant ->
    def buildType = variant.buildType.name
    def taskName = "createMagiskModule${buildType.capitalize()}"

    task(taskName) {
        group = "build"
        description = "Creates a Magisk module with the server-${buildType}.apk renamed to mirrord"

        // Use the new layout API
        def outputDir = layout.buildDirectory.dir("magisk-module").get().asFile
        def apkFile = layout.buildDirectory.file("outputs/apk/${buildType}/server-${buildType}.apk").get().asFile
        def templateMetaInfDir = file("${project.rootDir}/template/META-INF")

        doLast {

            if (outputDir.exists()) {
                outputDir.deleteDir()
            }

            // Copy and rename the APK to the module directory
            copy {
                from apkFile
                into outputDir
                rename { "mirrord" }
            }

            // Copy the META-INF directory from the template
            copy {
                from templateMetaInfDir
                into new File(outputDir, "META-INF")
            }

            // Create the module.prop file
            def moduleProp = new File(outputDir, "module.prop")
            moduleProp.text = """
id=io.github.tsioam.mirror.server
name=Mirror Server Magisk Module
version=${moduleVersion}
versionCode=${moduleVersionCode}
author=${author}
description=Runs mirrord on boot using Magisk
""".stripIndent()

            // Create the service.sh script
            def serviceSh = new File(outputDir, "service.sh")
            serviceSh.text = """
#!/system/bin/sh
MODDIR=\${0%/*}
APK_PATH="\$MODDIR/mirrord"
CLASSPATH=\$APK_PATH app_process / io.github.tsioam.mirror.server.Server > "\$MODDIR/mirrord.log" 2>&1 &
            """.stripIndent()
            serviceSh.setExecutable(true)

            def postFsDataSh = new File(outputDir, "post-fs-data.sh")
            postFsDataSh.text = "#!/system/bin/sh\n"
            postFsDataSh.setExecutable(true)

            // Package the module into a zip file
            ant.zip(destfile: "${layout.buildDirectory.get().asFile}/MagiskModule-v${moduleVersion}.zip", basedir: outputDir)

            println "Magisk module created at: ${layout.buildDirectory.get().asFile}/MagiskModule-v${moduleVersion}.zip"
        }
    }

    // Hook the task to run after the corresponding build
    variant.assembleProvider.get().finalizedBy(tasks[taskName])
}